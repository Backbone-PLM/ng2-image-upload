{"version":3,"file":"angular2-image-upload.js.map","sources":["ng://angular2-image-upload/lib/file-drop.directive.ts","ng://angular2-image-upload/lib/image-upload.service.ts","ng://angular2-image-upload/lib/file-holder.ts","ng://angular2-image-upload/lib/image-upload/image-upload.component.ts","ng://angular2-image-upload/lib/image-upload.module.ts"],"sourcesContent":["import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Directive({\n  selector: '[fileDrop]'\n})\nexport class FileDropDirective {\n  @Input() accept: string[];\n  @Output() fileOver: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() fileDrop: EventEmitter<FileList> = new EventEmitter<FileList>();\n\n  private static getDataTransfer(event: any): DataTransfer {\n    return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;\n  }\n\n  private static hasFiles(types: any): boolean {\n    if (!types) {\n      return false;\n    }\n\n    if (types.indexOf) {\n      return types.indexOf('Files') !== -1;\n    }\n\n    if (types.contains) {\n      return types.contains('Files');\n    }\n\n    return false;\n  }\n\n  private static matchRule(rule: string, candidate: string) {\n    return new RegExp('^' + rule.split('*').join('.*') + '$').test(candidate);\n  }\n\n  @HostListener('drop', ['$event'])\n  onDrop(event: any) {\n    const dataTransfer = FileDropDirective.getDataTransfer(event);\n\n    if (!FileDropDirective.hasFiles(dataTransfer.types)) {\n      return;\n    }\n\n    event.preventDefault();\n\n    const files = this.filterFiles(dataTransfer.files);\n\n    event.preventDefault();\n    this.fileOver.emit(false);\n    this.fileDrop.emit(files);\n  }\n\n  @HostListener('dragleave', ['$event'])\n  onDragLeave(event) {\n    this.fileOver.emit(false);\n  }\n\n  @HostListener('dragover', ['$event'])\n  onDragOver(event: any) {\n    const dataTransfer = FileDropDirective.getDataTransfer(event);\n\n    if (!FileDropDirective.hasFiles(dataTransfer.types)) {\n      return;\n    }\n\n    dataTransfer.dropEffect = 'copy';\n    event.preventDefault();\n    this.fileOver.emit(true);\n  }\n\n  private filterFiles(files: FileList): any {\n    if (!this.accept || this.accept.length === 0) {\n      return files;\n    }\n\n    const acceptedFiles: File[] = [];\n\n    for (let i = 0; i < files.length; i++) {\n      for (let j = 0; j < this.accept.length; j++) {\n        if (FileDropDirective.matchRule(this.accept[j], files[i].type)) {\n          acceptedFiles.push(files[i]);\n          break;\n        }\n      }\n    }\n\n    return acceptedFiles;\n  }\n}\n","import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class ImageUploadService {\n  constructor(private http: HttpClient) {\n  }\n\n  public uploadImage(url: string,\n                     image: File,\n                     headers?: HttpHeaders | { [name: string]: string | string[] },\n                     partName: string = 'image',\n                     customFormData?: { [header: string]: string | Blob },\n                     withCredentials?: boolean): Observable<HttpResponse<any>> {\n    if (!url || url === '') {\n      throw new Error('Url is not set! Please set it before doing queries');\n    }\n\n    const formData = new FormData();\n\n    if (customFormData) {\n      for (const key of Object.keys(customFormData)) {\n        formData.append(key, customFormData[key]);\n      }\n    }\n\n    formData.append(partName, image);\n\n    return this.http.post(url, formData, { withCredentials, headers, observe: 'response' });\n  }\n}\n","import { HttpResponse } from '@angular/common/http';\n\nexport class FileHolder {\n  public pending = false;\n  public serverResponse: { status: number, response: HttpResponse<any> };\n\n  constructor(public src: string, public file: File) {\n  }\n}\n","import { HttpHeaders, HttpResponse } from '@angular/common/http'\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core'\nimport { FileHolder } from '../file-holder'\nimport { ImageUploadService } from '../image-upload.service'\nimport { Style } from '../style'\nimport { UploadMetadata } from '../upload-metadata'\n\n@Component({\n  selector: 'image-upload',\n  templateUrl: './image-upload.component.html',\n  styleUrls: ['./image-upload.component.css']\n})\nexport class ImageUploadComponent implements OnInit, OnChanges {\n  files: FileHolder[] = []\n  fileCounter = 0\n  fileOver = false\n  showFileTooLargeMessage = false\n\n  @Input() beforeUpload: (\n    metadata: UploadMetadata\n  ) => UploadMetadata | Promise<UploadMetadata> = metadata => metadata\n  @Input() buttonCaption = 'Select Images'\n  @Input() disabled = false\n  @Input('class') cssClass = 'img-ul'\n  @Input() clearButtonCaption = 'Clear'\n  @Input() dropBoxMessage = 'Drop your images here!'\n  @Input() fileTooLargeMessage: string\n  @Input() headers: HttpHeaders | { [name: string]: string | string[] }\n  @Input() dropBoxClickable = false\n  @Input() max = 100\n  @Input() maxFileSize: number\n  @Input() preview = true\n  @Input() partName: string\n  @Input() style: Style\n  @Input('extensions') supportedExtensions: string[]\n  @Input() url: string\n  @Input() withCredentials = false\n  @Input() uploadedFiles: string[] | Array<{ url: string; fileName: string; blob?: Blob }> = []\n  @Output() removed = new EventEmitter<FileHolder>()\n  @Output() uploadStateChanged = new EventEmitter<boolean>()\n  @Output() uploadFinished = new EventEmitter<FileHolder>()\n  @Output() previewClicked = new EventEmitter<FileHolder>()\n\n  @ViewChild('input')\n  private inputElement: ElementRef\n  private pendingFilesCounter = 0\n\n  constructor(private imageService: ImageUploadService) {}\n\n  ngOnInit() {\n    if (!this.fileTooLargeMessage) {\n      this.fileTooLargeMessage =\n        'An image was too large and was not uploaded.' +\n        (this.maxFileSize ? ' The maximum file size is ' + this.maxFileSize / 1024 + 'KiB.' : '')\n    }\n    this.supportedExtensions = this.supportedExtensions\n      ? this.supportedExtensions.map(ext => 'image/' + ext)\n      : ['image/*']\n  }\n\n  deleteAll() {\n    this.files.forEach(f => this.removed.emit(f))\n    this.files = []\n    this.fileCounter = 0\n    if (this.inputElement) {\n      this.inputElement.nativeElement.value = ''\n    }\n  }\n\n  deleteFile(file: FileHolder): void {\n    const index = this.files.indexOf(file)\n    this.files.splice(index, 1)\n    this.fileCounter--\n    if (this.inputElement) {\n      this.inputElement.nativeElement.value = ''\n    }\n    this.removed.emit(file)\n  }\n\n  previewFileClicked(file: FileHolder) {\n    this.previewClicked.emit(file)\n  }\n\n  ngOnChanges(changes) {\n    if (changes.uploadedFiles && changes.uploadedFiles.currentValue.length > 0) {\n      this.processUploadedFiles()\n    }\n  }\n\n  onFileChange(files: FileList) {\n    if (this.disabled) return\n\n    const remainingSlots = this.max - this.fileCounter\n    const filesToUploadNum = files.length > remainingSlots ? remainingSlots : files.length\n\n    if (this.url && filesToUploadNum !== 0) {\n      this.uploadStateChanged.emit(true)\n    }\n\n    this.fileCounter += filesToUploadNum\n    this.showFileTooLargeMessage = false\n    this.uploadFiles(files, filesToUploadNum)\n  }\n\n  onFileOver = isOver => (this.fileOver = isOver)\n\n  private onResponse(response: HttpResponse<any>, fileHolder: FileHolder) {\n    fileHolder.serverResponse = { status: response.status, response }\n    fileHolder.pending = false\n\n    this.uploadFinished.emit(fileHolder)\n\n    if (--this.pendingFilesCounter === 0) {\n      this.uploadStateChanged.emit(false)\n    }\n  }\n\n  private processUploadedFiles() {\n    for (let i = 0; i < this.uploadedFiles.length; i++) {\n      const data: any = this.uploadedFiles[i]\n\n      let fileBlob: Blob, file: File, fileUrl: string\n\n      if (data instanceof Object) {\n        fileUrl = data.url\n        fileBlob = data.blob ? data.blob : new Blob([data])\n        file = new File([fileBlob], data.fileName)\n      } else {\n        fileUrl = data\n        fileBlob = new Blob([fileUrl])\n        file = new File([fileBlob], fileUrl)\n      }\n\n      this.files.push(new FileHolder(fileUrl, file))\n    }\n  }\n\n  private async uploadFiles(files: FileList, filesToUploadNum: number) {\n    for (let i = 0; i < filesToUploadNum; i++) {\n      const file = files[i]\n\n      if (this.maxFileSize && file.size > this.maxFileSize) {\n        this.fileCounter--\n        this.inputElement.nativeElement.value = ''\n        this.showFileTooLargeMessage = true\n        this.uploadStateChanged.emit(false)\n        continue\n      }\n\n      const beforeUploadResult: UploadMetadata = await this.beforeUpload({\n        file,\n        url: this.url,\n        abort: false\n      })\n\n      if (beforeUploadResult.abort) {\n        this.fileCounter--\n        this.inputElement.nativeElement.value = ''\n        continue\n      }\n\n      const img = document.createElement('img') as HTMLImageElement\n      img.src = window.URL.createObjectURL(beforeUploadResult.file)\n\n      const reader = new FileReader()\n      reader.addEventListener(\n        'load',\n        (event: any) => {\n          const fileHolder: FileHolder = new FileHolder(\n            event.target.result,\n            beforeUploadResult.file\n          )\n          this.files.push(fileHolder)\n          this.uploadSingleFile(fileHolder, beforeUploadResult.url, beforeUploadResult.formData)\n        },\n        false\n      )\n      reader.readAsDataURL(beforeUploadResult.file)\n    }\n  }\n\n  private uploadSingleFile(\n    fileHolder: FileHolder,\n    url = this.url,\n    customForm?: { [name: string]: any }\n  ) {\n    if (url) {\n      this.pendingFilesCounter++\n      fileHolder.pending = true\n\n      this.imageService\n        .uploadImage(\n          url,\n          fileHolder.file,\n          this.headers,\n          this.partName,\n          customForm,\n          this.withCredentials\n        )\n        .subscribe(\n          response => this.onResponse(response, fileHolder),\n          error => {\n            this.onResponse(error, fileHolder)\n            this.deleteFile(fileHolder)\n          }\n        )\n    } else {\n      this.uploadFinished.emit(fileHolder)\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FileDropDirective } from './file-drop.directive';\nimport { ImageUploadService } from './image-upload.service';\nimport { ImageUploadComponent } from './image-upload/image-upload.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    ImageUploadComponent,\n    FileDropDirective\n  ],\n  exports: [ImageUploadComponent]\n})\nexport class ImageUploadModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ImageUploadModule,\n      providers: [ImageUploadService]\n    };\n  }\n}\n"],"names":["tslib_1.__values"],"mappings":"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"}
